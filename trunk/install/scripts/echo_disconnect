#!/bin/bash

# Dump all connections if EchoIRLP node drops call.
# Note provision to override this behaviour
CURS=">"

if [ ! -f "$LOCAL"/echoirlp ] ; then
   # Connection is not using Echolink protocol, so ignore spurious 
   # disconnection status messages
   exit 0
fi

if [ -f "$LOCAL"/echoidle ] ; then
   # Connection is in idle mode, we don't want to dump Echolink users
   # In this mode, we let people come and go as they please.
   # We do need to check for manually initiated connection though 
   # to avoid the node being in an inconsistent state. 
   if [ -f "$LOCAL"/echo_active ] ; then
      ECHO_CONNECTED=`cat "$LOCAL"/echo_call`
      if [ "$1" = "$ECHO_CONNECTED" ] ; then
         # Need to drop manually initiated connection
         $ECHO_SCRIPT/echo_end
      fi
   fi 
   exit 0
fi

if [ "$1" = "$ECHO_MYCALL" ]; then 
   if [ "$ECHO_DROP_ON_IRLP_DISC" != NO ] ; then
      $ECHO_TBD_COMMAND -q message "$ECHO_MYCALL$CURS EchoIRLP node disconnected."
      sleep 1
      $ECHO_TBD_COMMAND -q disconnect all
      $ECHO_SCRIPT/echo_end
   fi
   exit 0  
fi

if [ "$2" = "1" ] || [ "$2" = "0" ] ; then
   # Assume IRLP node is the only system connected, 
   # so disconnect and set back to idle status.
   # Do not disconnect local IRLP node if outbound echolink pending
   if [ -f "$LOCAL"/echo_pending ] ; then 
      exit 0
   fi 
   echo "$1" > "$LOCAL"/echo_call
   "$ECHO_SCRIPT"/echo_wavgen "$LOCAL"/echo_call
   "$ECHO_SCRIPT"/echo_end
else
   echo Node "$1" disconnected
fi
