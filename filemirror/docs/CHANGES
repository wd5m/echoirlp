If you're not going to use the echo-idle feature, this version is a drop 
in 
replacement for version 0.30. Just replace the files (after making a 
backup, just in case...).

Features:

Node busy conditions give audio indication of the status to the remote 
node 
before disconnecting them - Great for RF users. :)

echo-idle - This is for those people who like to sit on the side of a 
favourite conference or link. Echo-idle "parks" the node on a sysop 
specified EchoLink station when the system is numinally idle (and 
reporting 
idle to both networks). If an IRLP call is made or received, the system 
will drop its internal link to EchoLink (after sending a text message then 
leaving all stations connected), then handle the IRLP call. At the 
conclusion of the IRLP call, the node will resume its "parked" Echolink 
connection. Incoming EchoLink calls are received without question (since 
the system is capable of this), and outgoing EchoLink calls are made with 
the "idling" conference attached.

To use Echo-idle, you create a file called echo-idle in your EchoIRLP 
directory, containing the callsign of the node you wish to idle on. Then 
to activate it, run $ECHO_SCRIPT/echo_idle on. To deactivate echo-idle, 
simply run $ECHO_SCRIPT/echo_idle off

You also need to modify the IRLP custom_on script to call 
$ECHO_SCRIPT/echoidle_sleep and the IRLP custom_off script needs to call 
$ECHO_SCRIPT/echoidle_wake.  Needless to say, you need to have CUSTOM_ON 
and CUSTOM_OFF set to "YES" in your IRLP environment file.

Note that the IRLP standard "sfswrapper" script needs to be modified for 
this feature to work properly, otherwise incoming audio will be lost 
whenever after scripts which interrupt ispeaker are run.  A replacement 
ispeaker script is provided in this archive.

This is the section which is modified:

if [ -f $LOCAL/connectedip ] ; then
FLAGS="-f`cat $LOCAL/connectedip`"
elif [ -f $LOCAL/calledip ] ; then
FLAGS="-f`cat $LOCAL/calledip`"
elif [ -f $LOCAL/echoidle ] ; then
# Connection is EchoIRLP idle mode, call customised script to handle this
"$ECHO_SCRIPT"/sfswrapper
exit 0
fi

The if-then-else structure in the original script needs to be changed to 
the above, which simply passes control to our custom sfswrapper script if 
the system is in echo-idle mode. You will need to use the NOUPDATE feature 
or equivalent to ensure the modified script isn't overwritten by the 
automated IRLP updates.

Bug fixes:
Fixed a bug where local users can confuse the system by rapidly connecting 
to and disconnecting from EchoLink nodes. This was caused by the delay in 
confirming nodes which were forcibly disconnected, which caused a 
disconnection attempt while connecting (and confusing the system big 
time!). EchoIRLP now ignores disconnection status messages from tbd while 
a connection attempt is in progress.

Implemented "local busy" so that incoming EchoLink calls don't disrupt 
local traffic. It works much the same as IRLP's feature which says "The 
node called is being used locally", and is controlled by the same 
environment ($REPORTBUSY) variable for simplicity and 
consistency. EchoLink nodes which receive the busy status will get a 
message informing them of the situation. Dunno how I forgot this one 
(whoops!) :)

Made the echo_inbound, echo_call and echo_call_conf check the IRLP 
$CUSTOM_ON variable before calling $CUSTOM/custom_on (so it behaves 
identical for all calls).

Made shared conference mode use tbd's hosts file when ECHO_TBD_ENABLE is 
set to YES.  This means there is only one EchoLink directory client 
contacting the servers, and the hosts file is always up to date.  This 
stops weird problems with being unable to connect to newer shared 
conferences in some configurations.
